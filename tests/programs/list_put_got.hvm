None =      λnone λsome (none)
Some = λval λnone λsome (some val)

Nil  =       λnil λcons (nil)
Cons = λh λt λnil λcons (cons h t)

List.got = λlist (list List.gotN List.gotC)
  List.gotN =       λindex (None, Nil)
  List.gotC = λh λt λindex (match index { 0: List.gotCZ 1+i: (List.gotCI i) } h t)
    List.gotCZ =    λh λt ((Some h), (Cons h t))
    List.gotCI = λi λh λt
      let (got, t) = (List.got t i)
      (got, (Cons h t))

List.put = λlist (list List.putN List.putC)
  List.putN =       λindex (match index { 0: List.putNZ 1+i: (List.putNI i) })
    List.putNZ =    λval (None, (Cons val Nil))
    List.putNI = λi λval
      let (old, t) = (List.putN i val)
      (old, (Cons None t))
  List.putC = λh λt λindex (match index { 0: List.putCZ 1+i: (List.putCI i) } h t)
    List.putCZ =    λh λt λval ((Some h), (Cons val t))
    List.putCI = λi λh λt λval 
      let (old, t) = (List.put t i val)
      (old, (Cons h t))

main = 
  let list = 
  (Cons (Some 0)
  (Cons (Some 1)
  (Cons (Some 2)
  (Cons (Some 3)
  (Cons (Some 4)
  (Cons (Some 5)
  (Cons (Some 6)
  (Cons (Some 7)
  (Cons (Some 8)
  (Cons (Some 9)
  (Cons (Some 10)
  (Cons (Some 11)
  (Cons (Some 12)
  (Cons (Some 13)
  (Cons (Some 14)
  (Cons (Some 15)
  (Cons (Some 16)
  (Cons (Some 17)
  (Cons (Some 18)
  (Cons (Some 19)
  (Cons (Some 20)
  (Cons (Some 21)
  (Cons (Some 22)
  (Cons (Some 23)
  (Cons (Some 24)
  (Cons (Some 25)
  (Cons (Some 26)
  (Cons (Some 27)
  (Cons (Some 28)
  (Cons (Some 29)
  (Cons (Some 30)
  (Cons (Some 31)
    Nil
  )))))
  )))))
  )))))
  )))))
  )))))
  )))))
  ))
  let (element, list) = (List.{fun} list {args})
  element