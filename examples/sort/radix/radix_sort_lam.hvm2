// data Arr = Empty | (Single x) | (Concat x0 x1)
Empty  =         λempty λsingle λconcat empty
Single = λx      λempty λsingle λconcat (single x)
Concat = λx0 λx1 λempty λsingle λconcat (concat x0 x1)

// data Map = Free | Used | (Node x0 x1)
Free =         λfree λused λnode free
Used =         λfree λused λnode used
Node = λx0 λx1 λfree λused λnode (node x0 x1)

// gen : u32 -> Arr
gen = λn match n {
  0: λx (Single x)
  +: λx
    let x0 = (<< x 1)
    let x1 = (| x0 1)
    (Concat (gen n-1 x0) (gen n-1 x1))
}

// rev : Arr -> Arr
rev = λa
  let a_empty  = Empty
  let a_single = λx (Single x)
  let a_concat = λx0 λx1 (Concat (rev x1) (rev x0))
  (a a_empty a_single a_concat)

// sum : Arr -> u32
sum = λa
  let a_empty  = 0
  let a_single = λx x
  let a_concat = λx0 λx1 (+ (sum x0) (sum x1))
  (a a_empty a_single a_concat)

// sort : Arr -> Arr
sort = λt (to_arr (to_map t) 0)

// to_arr : Map -> u32 -> Arr
to_arr = λa
  let a_free = λk Empty
  let a_used = λk (Single k)
  let a_node = λx0 λx1 λk
    let x0 = (to_arr x0 (+ (* k 2) 0))
    let x1 = (to_arr x1 (+ (* k 2) 1))
    (Concat x0 x1)
  (a a_free a_used a_node)

// to_map : Arr -> Map
to_map = λa
  let a_empty  = Free
  let a_single = λx (radix x)
  let a_concat = λx0 λx1 (merge (to_map x0) (to_map x1))
  (a a_empty a_single a_concat)

// merge : Map -> Map -> Map
merge = λa
  let a_free = λb
    let b_free = Free
    let b_used = Used
    let b_node = λb0 λb1 (Node b0 b1)
    (b b_free b_used b_node)
  let a_used = λb
    let b_free = Used
    let b_used = Used
    let b_node = λb0 λb1 0
    (b b_free b_used b_node)
  let a_node = λa0 λa1 λb
    let b_free = λa0 λa1 (Node a0 a1)
    let b_used = λa0 λa1 0
    let b_node = λb0 λb1 λa0 λa1 (Node (merge a0 b0) (merge a1 b1))
    (b b_free b_used b_node a0 a1)
  (a a_free a_used a_node)

// radix : u32 -> Map
radix = λn
  let r = Used
  let r = (swap (& n       1) r Free)
  let r = (swap (& n       2) r Free)
  let r = (swap (& n       4) r Free)
  let r = (swap (& n       8) r Free)
  let r = (swap (& n      16) r Free)
  let r = (swap (& n      32) r Free)
  let r = (swap (& n      64) r Free)
  let r = (swap (& n     128) r Free)
  let r = (swap (& n     256) r Free)
  let r = (swap (& n     512) r Free)
  let r = (swap (& n    1024) r Free)
  let r = (swap (& n    2048) r Free)
  let r = (swap (& n    4096) r Free)
  let r = (swap (& n    8192) r Free)
  let r = (swap (& n   16384) r Free)
  let r = (swap (& n   32768) r Free)
  let r = (swap (& n   65536) r Free)
  let r = (swap (& n  131072) r Free)
  let r = (swap (& n  262144) r Free)
  let r = (swap (& n  524288) r Free)
  let r = (swap (& n 1048576) r Free)
  let r = (swap (& n 2097152) r Free)
  let r = (swap (& n 4194304) r Free)
  let r = (swap (& n 8388608) r Free)
  r

// swap : u32 -> Map -> Map -> Map
swap = λn match n {
  0: λx0 λx1 (Node x0 x1)
  +: λx0 λx1 (Node x1 x0)
}

// main : u32
main = (sum (sort (rev (gen 20 0))))
