// // Church Nat constructors
// @c_z = * (a a))
// @c_s = (s (z k)) ([(k r) s] (z r)))
// 
// // Church Nats
// @c0 = (* (a a))
// @c1 = ((a R) (a R))
// @c2 = ([(b a) (a R)] (b R))
// @c3 = ([[(c b) (b a)] (a R)] (c R))
// @c4 = ([[[(d c) (c b)] (b a)] (a R)] (d R))
// @c5 = ([[[[(e d) (d c)] (c b)] (b a)] (a R)] (e R))
// @c6 = ([[[[[(f e) (e d)] (d c)] (c b)] (b a)] (a R)] (f R))
// @c7 = ([[[[[[(g f) (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (g R))
// @c8 = ([[[[[[[(h g) (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (h R))
// @c9 = ([[[[[[[[(i h) (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (i R))
// @c10 = ([[[[[[[[[(j i) (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (j R))
// @c11 = ([[[[[[[[[[(k j) (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (k R))
// @c12 = ([[[[[[[[[[[(l k) (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (l R))
// @c13 = ([[[[[[[[[[[[(m l) (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (m R))
// @c14 = ([[[[[[[[[[[[[(n m) (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (n R))
// @c15 = ([[[[[[[[[[[[[[(o n) (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (o R))
// @c16 = ([[[[[[[[[[[[[[[(p o) (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (p R))
// @c17 = ([[[[[[[[[[[[[[[[(q p) (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (q R))
// @c18 = ([[[[[[[[[[[[[[[[[(r q) (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (r R))
// @c19 = ([[[[[[[[[[[[[[[[[[(s r) (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (s R))
// @c20 = ([[[[[[[[[[[[[[[[[[[(t s) (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (t R))
// @c21 = ([[[[[[[[[[[[[[[[[[[[(u t) (t s)] (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (u R))
// @c22 = ([[[[[[[[[[[[[[[[[[[[[(v u) (u t)] (t s)] (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (v R))
// @c23 = ([[[[[[[[[[[[[[[[[[[[[[(w v) (v u)] (u t)] (t s)] (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (w R))
// @c24 = ([[[[[[[[[[[[[[[[[[[[[[[(x w) (w v)] (v u)] (u t)] (t s)] (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (x R))
// @c25 = ([[[[[[[[[[[[[[[[[[[[[[[[(y x) (x w)] (w v)] (v u)] (u t)] (t s)] (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (x R))
// @c26 = ([[[[[[[[[[[[[[[[[[[[[[[[[(z y) (y x)] (x w)] (w v)] (v u)] (u t)] (t s)] (s r)] (r q)] (q p)] (p o)] (o n)] (n m)] (m l)] (l k)] (k j)] (j i)] (i h)] (h g)] (g f)] (f e)] (e d)] (d c)] (c b)] (b a)] (a R)] (x R))
// 
// // Church Nats
// @mul = ((a b) ((c a) (c b)))
// 
// // Bools
// @T = (t (* t))
// @F = (* (f f))
// 
// // Bool Fns
// @not = ((f (t r)) (t (f r)))
// @and = ((((@T (@F a)) a) (((@F (@F b)) b) c)) c)
// 
// // Scott Nats
// @S = (a ((a b) (* b)))
// @Z = (* (a a))
// 
// // Generators for a big binary tree
// // λr. λt. ((t r) r)
// @g_s = ({r0 r1} ((r0 (r1 r)) r))
// @g_z = (x x)
// 
// // BitString constructors
// // O = λxs λo λi λe (o xs)
// // I = λxs λo λi λe (i xs)
// // E =     λo λi λe e
// @O = (xs ((xs r) (* (* r))))
// @I = (xs (* ((xs r) (* r))))
// @E = (* (* (e e)))
// 
// // Double
// @nidS = (p R) & @S ~ (nidp R) & @nid ~ (p nidp)
// @nid  = ((@nidS (@Z R)) R)
// 
// // Decrements a BitString
// // decO = λp(I (dec p))
// // decI = λp(low p)
// // dec  = λx(((x decO) decI) E)
// @decO = (p idecp) & @I ~ (decp idecp) & @dec ~ (p decp)
// @decI = (p lowp) & @low ~ (p lowp)
// @dec  = ((@decO (@decI (@E R))) R)
// 
// // Auxiliary function
// // lowO = λp(O (O p))
// // lowI = λp(O (I p))
// // low  = λx(((x lowO) lowI) E)
// @lowO = (p oop) & @O ~ (p op) & @O ~ (op oop)
// @lowI = (p oip) & @I ~ (p ip) & @O ~ (ip oip)
// @low  = ((@lowO (@lowI (@E R))) R)
// 
// // Decrements a BitString until it is zero
// // runO = λp(run (dec (O p)))
// // runI = λp(run (dec (I p)))
// // run  = λx(((x runO) runI) E)
// @runO = (p R) & @run ~ (decop R) & @dec ~ (op decop) & @O ~ (p op)
// @runI = (p R) & @run ~ (decip R) & @dec ~ (ip decip) & @I ~ (p ip)
// @run  = ((@runO (@runI (@E R))) R)
// 
// // Decrements 2^N BitStrings until they reach zero
// // brnZ = (run (c8 S Z))
// // brnS = λp {(brn p) (brn p)}
// // brn  = λn ((n brnS) brnZ)
// @brnZ = R & @run ~ (val R) & @c11 ~ (@I (@E val))
// @brnS = ([p0 p1] (r0 r1)) & @brn ~ (p0 r0) & @brn ~ (p1 r1)
// @brn  = ((@brnS (@brnZ r)) r)
// 
// // af  = λx (x afS afZ)
// // afS = λp (and (af p) (af p))
// // afZ = T
// @af  = ((@afS (@afZ a)) a)
// @afS = ([a b] c) & (b d) ~ @af & (e (d c)) ~ @and & (a e) ~ @af
// @afZ = @T
// 
// // Church multiplication.
// @ex0 = root & @c2 ~ (@k2 root)
// 
// // Allocates a big tree.
// @ex1 = root & @c24 ~ (@g_s (@g_z root))
// 
// // Decrease a binary counter.
// @ex2 = R & @c26 ~ (@I (@E nie)) & @run ~ (nie R)
// 
// // Decreases many binary counters.
// @ex3 = R & @c16 ~ (@S (@Z dep)) & @brn ~ (dep R)

@main = #42
