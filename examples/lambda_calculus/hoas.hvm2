// Example HOAS evaluator for the λ-Calculus on HVM-Lang.

Lam =      λbod λlam λapp λsub (lam bod)
App = λfun λarg λlam λapp λsub (app fun arg)
Sub = λexp      λlam λapp λsub (sub exp)

reduce = λterm
  let clam = λbod (Lam bod)
  let capp = λfun λarg (reduce.app (reduce fun) arg)
  let csub = λexp (Sub exp)
  (term clam capp csub)

reduce.app = λfun
  let clam = λfbod       λx (reduce (fbod x))
  let capp = λffun λfarg λx (App (App ffun farg) x)
  let csub = λfexp       λx (App (Sub fexp) x)
  (fun clam capp csub)

normal.go = λterm
  let clam = λbod (Lam λx (normal (bod (Sub x))))
  let capp = λfun λarg (App (normal fun) (normal arg))
  let csub = λexp exp
  (term clam capp csub)

normal = λterm
  (normal.go (reduce term))

ID    = (Lam λx x)
C0    = (Lam λf (Lam λx x))
C1    = (Lam λf (Lam λx (App f x)))
C2    = (Lam λf (Lam λx (App f (App f x))))
C3    = (Lam λf (Lam λx (App f (App f (App f x)))))
C4    = (Lam λf (Lam λx (App f (App f (App f (App f x))))))
C6    = (Lam λf (Lam λx (App f (App f (App f (App f (App f (App f x))))))))
C8    = (Lam λf (Lam λx (App f (App f (App f (App f (App f (App f (App f x)))))))))
CS    = (Lam λn (Lam λs (Lam λz (App s (App (App n s) z)))))
FOO   = (Lam λx (App x x))
False = (Lam λt (Lam λf f))
True  = (Lam λt (Lam λf t))
Not   = (Lam λb (App (App b False) True))

Main = (normal (App (App (App C6 C6) Not) True))

//λa λ* λ* (a λb λc λ* λ* (c λ* b))
//λa λ* λ* (a λ* λb λ* λ* (b λc c))
//λa λ* λ* (a λb λc λ* λ* (c λ* b))
//λa λ* λ* (a λ* λb λ* λ* (b λc c))
//λa λ* λ* (a λb λc λ* λ* (c λ* b))


//λa λ* λ* (a λb λc λ* λ* (c λ* b))
//λa λ* λ* (a λ* λb λ* λ* (b λc c))
